<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="test">
	<!-- 映射文件中配置很多sql语句 -->
	<!-- 通过select标签执行数据库查询
		id:标示映射文件中的sql 成为statement的id
		将sql语句封装到mappedStatement对象中所以将id称为statement的id		
	 -->
	 <select id="findUserById" parameterType="int" resultType="cn.itcast.mybatis.po.User">
	 	SELECT * FROM user WHERE id=#{id}
	 </select>
	 
	 <!-- resultType:指定的是单条记录映射的java对象类型 -->
	 <!-- ${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中
	 	引起sql注入
	  -->
	 <select id="findUserByName" parameterType="java.lang.String" resultType="cn.itcast.mybatis.po.User">
	 	SELECT * FROM user WHERE username LIKE '%${value}%'
	 </select>
	 
	 <!-- 添加用户
	 	parameterType:pojo类型
	 	#{}中指定pojo的属性名 接受到pojo对象的属性值，mybatis通过OGNL获得对象的属性值
	  -->
	 <insert id="insertUser" parameterType="cn.itcast.mybatis.po.User">
	 	<!-- 
	 		将插入的主键返回
	 		select last_insert_id()得到刚插入的主键 只适用于自增类型
	 		keyProperty:将查询到主键设置到parameterType指定的对象的那个属性
	 		order:select last_insert_id()执行顺序，相对于insert语句来说它的执行顺序
	 	 -->
	 	<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
	 		select last_insert_id()
	 	</selectKey>
	 	
	 	<!-- 通过mysql的uuid()生成主键
	 		首先通过uuid得到主键，将主键设置到user对象的id属性中。其次在执行insert时。从user对象中取出id属性值
	 	 -->
	 	INSERT INTO user(username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
	 </insert>
	 
	 <delete id="deleteUser" parameterType="java.lang.Integer">
	 	delete from user where id=#{id}
	 </delete>
	 
	 <update id="updateUser" parameterType="cn.itcast.mybatis.po.User">
	 	update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
	 </update>
</mapper>







